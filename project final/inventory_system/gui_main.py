import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from .models import Product, Warehouse
from .exceptions import InventoryError


class InventoryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        self.root.geometry("950x600")

        self.warehouse = Warehouse()
        self.sort_reverse = False
        self.sort_column = None

        # === –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ===
        control_frame = tk.Frame(root)
        control_frame.pack(pady=10)

        tk.Label(control_frame, text="–ü–æ–∏—Å–∫:").grid(row=0, column=0)
        self.search_entry = tk.Entry(control_frame, width=20)
        self.search_entry.grid(row=0, column=1, padx=5)
        tk.Button(control_frame, text="üîç –ò—Å–∫–∞—Ç—å", command=self.search_products).grid(row=0, column=2)
        tk.Button(control_frame, text="–°–±—Ä–æ—Å–∏—Ç—å", command=self.refresh_table).grid(row=0, column=3, padx=10)

        tk.Label(control_frame, text="SKU:").grid(row=1, column=0)
        self.sku_entry = tk.Entry(control_frame, width=10)
        self.sku_entry.grid(row=1, column=1)

        tk.Label(control_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=1, column=2)
        self.name_entry = tk.Entry(control_frame, width=15)
        self.name_entry.grid(row=1, column=3)

        tk.Label(control_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=1, column=4)
        self.category_entry = tk.Entry(control_frame, width=15)
        self.category_entry.grid(row=1, column=5)

        tk.Label(control_frame, text="–ö–æ–ª-–≤–æ:").grid(row=2, column=0)
        self.qty_entry = tk.Entry(control_frame, width=10)
        self.qty_entry.grid(row=2, column=1)

        tk.Label(control_frame, text="–¶–µ–Ω–∞:").grid(row=2, column=2)
        self.price_entry = tk.Entry(control_frame, width=10)
        self.price_entry.grid(row=2, column=3)

        tk.Button(control_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_product).grid(row=2, column=4, padx=5)
        tk.Button(control_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.remove_product).grid(row=2, column=5)
        tk.Button(control_frame, text="–û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_table).grid(row=2, column=6, padx=5)

        # === –¢–∞–±–ª–∏—Ü–∞ ===
        columns = ("sku", "name", "category", "quantity", "price")
        self.tree = ttk.Treeview(root, columns=columns, show="headings", height=18)
        for col in columns:
            self.tree.heading(col, text=col.upper(), command=lambda c=col: self.sort_by_column(c))
            self.tree.column(col, anchor="center", width=150)
        self.tree.pack(fill="both", expand=True)
        self.tree.bind("<Double-1>", self.edit_product)

        # === –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å ===
        bottom_frame = tk.Frame(root)
        bottom_frame.pack(pady=10)
        tk.Button(bottom_frame, text="–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫", command=self.show_low_stock).pack(side="left", padx=10)
        tk.Button(bottom_frame, text="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", command=self.show_total_value).pack(side="left", padx=10)

        self.refresh_table()

    # --- –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
    def add_product(self):
        try:
            sku = self.sku_entry.get().strip()
            name = self.name_entry.get().strip()
            category = self.category_entry.get().strip()
            quantity = int(self.qty_entry.get())
            price = float(self.price_entry.get())

            product = Product(sku, name, category, quantity, price)
            self.warehouse.add_product(product)
            self.refresh_table()
            self.clear_entries()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!")

        except InventoryError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")

    def remove_product(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        sku = self.tree.item(selected[0], "values")[0]
        try:
            self.warehouse.remove_product(sku)
            self.refresh_table()
            messagebox.showinfo("–£–¥–∞–ª–µ–Ω–æ", f"–¢–æ–≤–∞—Ä {sku} —É–¥–∞–ª—ë–Ω.")
        except InventoryError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

    def edit_product(self, event):
        selected = self.tree.selection()
        if not selected:
            return
        sku = self.tree.item(selected[0], "values")[0]
        product = self.warehouse.products.get(sku)
        if not product:
            return

        new_name = simpledialog.askstring("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ù–æ–≤–æ–µ –∏–º—è:", initialvalue=product.name)
        if new_name is None:
            return
        new_category = simpledialog.askstring("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:", initialvalue=product.category)
        if new_category is None:
            return
        try:
            new_qty = int(simpledialog.askstring("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", initialvalue=product.quantity))
            new_price = float(simpledialog.askstring("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ù–æ–≤–∞—è —Ü–µ–Ω–∞:", initialvalue=product.price))
        except (ValueError, TypeError):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            return

        product.name = new_name
        product.category = new_category
        product.quantity = new_qty
        product.price = new_price
        self.warehouse.save_to_file()
        self.refresh_table()

    def refresh_table(self, products=None):
        for row in self.tree.get_children():
            self.tree.delete(row)
        products = products or self.warehouse.list_all()
        for p in products:
            self.tree.insert("", "end", values=(p.sku, p.name, p.category, p.quantity, f"{p.price:.2f}"))

    def search_products(self):
        text = self.search_entry.get().strip().lower()
        if not text:
            self.refresh_table()
            return
        results = [p for p in self.warehouse.products.values()
                   if text in p.name.lower() or text in p.category.lower()]
        self.refresh_table(results)

    def sort_by_column(self, col):
        reverse = not self.sort_reverse if self.sort_column == col else False
        self.sort_reverse = reverse
        self.sort_column = col
        sorted_products = sorted(
            self.warehouse.products.values(),
            key=lambda p: getattr(p, col),
            reverse=reverse
        )
        self.refresh_table(sorted_products)

    def show_low_stock(self):
        low_items = self.warehouse.low_stock(5)
        if not low_items:
            messagebox.showinfo("–û—Å—Ç–∞—Ç–∫–∏", "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–æ—Ä–º–µ!")
        else:
            msg = "\n".join([f"{p.name} ‚Äî {p.quantity} —à—Ç." for p in low_items])
            messagebox.showwarning("–ú–∞–ª—ã–π –æ—Å—Ç–∞—Ç–æ–∫", msg)

    def show_total_value(self):
        total = self.warehouse.total_value()
        messagebox.showinfo("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"üí∞ {total:.2f} —Ç–≥–µ.")

    def clear_entries(self):
        for entry in [self.sku_entry, self.name_entry, self.category_entry, self.qty_entry, self.price_entry]:
            entry.delete(0, tk.END)


def main():
    root = tk.Tk()
    app = InventoryApp(root)
    root.mainloop()
